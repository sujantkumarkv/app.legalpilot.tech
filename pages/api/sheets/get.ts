import {NextApiRequest, NextApiResponse} from "next";
// import fetch from "node-fetch";

const SPREADSHEET_ID = "16dd9VEvLtFHVH2ZIFGRcnSkpeauNv4qJqTJ8llYnXyM";

// const SHEETS_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/Sheet1?key=${API_KEY}`;

// const handler = async (req: NextApiRequest, res: NextApiResponse) => {
//     try {
//         const response = await fetch(SHEETS_URL, {method: "GET"});
//         // if (!response.ok) {
//         //     throw new Error("response not ok");
//         // }
//         const data: any = await response.json();
//         // let sheetArray = data.values;
//         res.status(200).json(data);
//     } catch (error) {
//         res.status(500).json({ message: `caught error: ${error}` });
//     }
// };
// export default handler;

import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';


// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
  ],
});

const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    try {
      await doc.loadInfo(); // loads document properties and worksheets
      const sheet = doc.sheetsById[0]; // `Id` is gid=0 in the sheets link // or use doc.sheetsById[id] or doc.sheetsByTitle[title]
      console.log(sheet.rowCount);
      res.status(200).json({ title: doc.title });
    } catch (error) {
      res.status(500).json({ message: `caught error: ${error}` });
    }
};
// await doc.updateProperties({ title: 'renamed doc' });