import {NextApiRequest, NextApiResponse} from "next";
import { Message } from "@/types/chat";

const SPREADSHEET_ID = process.env.SPREADSHEET_ID || "";

// const SHEETS_URL = `https://sheets.googleapis.com/v4/spreadsheets/${SPREADSHEET_ID}/values/Sheet1?key=${API_KEY}`;
// const handler = async (req: NextApiRequest, res: NextApiResponse) => {
//     try {
//         const response = await fetch(SHEETS_URL, {method: "GET"});
//         // if (!response.ok) {
//         //     throw new Error("response not ok");
//         // }
//         const data: any = await response.json();
//         // let sheetArray = data.values;
//         res.status(200).json(data);
//     } catch (error) {
//         res.status(500).json({ message: `caught error: ${error}` });
//     }
// };
// export default handler;

import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
  scopes: [
    'https://www.googleapis.com/auth/spreadsheets',
  ],
});

const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);

export default async function handler(req: NextApiRequest, res: NextApiResponse, param: string) {
    try {
      await doc.loadInfo(); // loads document properties and worksheets
      const sheet = doc.sheetsById[0]; // `Id` is gid=0 in the sheets link // or use doc.sheetsById[id] or doc.sheetsByTitle[title]

      let conversation = req.body;

      // check if chat already exists (feedback OR user query update)
      const rows = await sheet.getRows();
      let convMessage: Message | undefined;
      let row: any | undefined;
      for (let message of conversation.messages) {
        row = rows.find((row) => row.get('messageuuid') === message.messageuuid);
        if (row) {
          convMessage = message;
        }
      }
      if (row && convMessage) {
        // update
        row.assign({
          assistant: convMessage.content,
          feedback: convMessage.feedback || "",
        });
        try {
          await row.save();
          res.status(200).json({ message: 'Successfully submitted. Thanks :)' }); 
        } catch (error) {
          res.status(500).json({ message: `Error submitting feedback. Try again...` });
        }
      } else {
        let lastTwoMessages = conversation.messages.slice(-2);
        // append
        let rowAppend = {
          apikey: process.env.OPENAI_API_KEY || "",
          convuuid: conversation.id,
          user: lastTwoMessages[0].content,
          assistant: lastTwoMessages[1].content,
          messageuuid: lastTwoMessages[1].messageuuid,
          feedback: lastTwoMessages[1].feedback || "",
        };
        await sheet.addRow(rowAppend);
      }
      // break;
      // done
      // res.status(200).json({ message: 'works' });

    } catch (error) {
      res.status(500).json({ message: `Error: ${error}. Try again...` });
    }
};